cmake_minimum_required(VERSION 3.5.1)

project(leaphi)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/CMakeModules")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)

#ensure MSVSC sets __cplusplus correctly
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("/Zc:__cplusplus" _flag_supported)
if(_flag_supported)
    add_compile_options("/Zc:__cplusplus")
endif()

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CMAKE_VERBOSE_MAKEFILE ON)
    #add_definitions(-pedantic -Wall)
endif()

FIND_PACKAGE(GUROBI)
FIND_PACKAGE(CPLEX)
FIND_PACKAGE(GNUPLOT)
FIND_PACKAGE(LEMON)

if(Apple)
    add_definitions(-DGTEST_USE_OWN_TR1_TUPLE)
    add_definitions(-D__GLIBCXX__)
    add_library(OpenMP_TARGET INTERFACE)
    add_library(OpenMP::OpenMP_CXX ALIAS OpenMP_TARGET)
    target_compile_options(OpenMP_TARGET INTERFACE ${OpenMP_CXX_FLAGS})
    FIND_PACKAGE(Threads REQUIRED)
    target_link_libraries(OpenMP_TARGET INTERFACE Threads::Threads)
    target_link_libraries(OpenMP_TARGET INTERFACE ${OpenMP_CXX_FLAGS})
else()
    find_package(OpenMP)
endif()

if(GUROBI_FOUND)
    INCLUDE_DIRECTORIES("${GUROBI_INCLUDE_DIR}")
    add_definitions(-DGUROBI)
else()
    MESSAGE("GUROBI NOT FOUND")
endif()

if(CPLEX_FOUND)
    #add_definitions(-lilocplex -lconcert -lcplex -lm -lpthread) #warnings under MSVC, not compiling under clang
    include_directories(cplex PRIVATE ${CPLEX_INCLUDE_DIR})
    include_directories(cplex PRIVATE ${CPLEX_ILOCPLEX_INCLUDE_DIR})
    include_directories(cp PRIVATE ${CPLEX_CP_INCLUDE_DIR})
    include_directories(concert PRIVATE ${CPLEX_CONCERT_INCLUDE_DIR})
    add_definitions(-DIL_STD )
    SET(requiredlibs ${requiredlibs} cplex-library cplex-concert ilocplex cplex-cp)
    add_definitions(-DCPLEX)
else()
    MESSAGE("CPLEX NOT FOUND")
endif()

if(GNUPLOT_FOUND)
    add_definitions(-DGNUPLOT)
    add_definitions(-DGNUPLOT_PATH=${GNUPLOT_PATH})
else()
    MESSAGE("GNUPLOT NOT FOUND")
endif()

IF(LEMON_FOUND)
    include_directories(${LEMON_INCLUDE_DIRECTORIES})
    link_directories(${LEMON_LINK_DIRECTORIES})
ENDIF()

if(OpenMP_CXX_FOUND)
    set(OpenMP_LIBRARIES OpenMP::OpenMP_CXX)
else()
    set(OpenMP_LIBRARIES "")
    MESSAGE("OpenMP NOT FOUND")
endif()

find_package(Boost COMPONENTS program_options)
if(Boost_FOUND)
    message(STATUS "Boost version: ${Boost_VERSION}")
    include_directories(${Boost_INCLUDE_DIR})
    link_directories(${Boost_LIBRARY_DIRS})
    add_definitions("-DHAS_BOOST")
else()
    message("BOOST NOT FOUND")
endif()

if(Boost_FOUND)
    if(Boost_PROGRAM_OPTIONS_FOUND)
        message(STATUS "Boost program_options found")
        add_definitions("-DHAS_BOOST_PROGRAM_OPTIONS")
    else()
        set(Boost_PROGRAM_OPTIONS_LIBRARY "")
        MESSAGE(STATUS "BOOST PROGRAM OPTIONS NOT FOUND")
    endif()
endif()

include_directories("rapidjson/include")

include_directories(networksolver kevintools networkdesign dataprocessing)
add_subdirectory(networksolver)
add_subdirectory(networkdesign)
add_subdirectory(kevintools)
add_subdirectory(dataprocessing)
add_subdirectory(test)

set(SOURCE_FILES main.cpp)
add_executable(leaphi ${SOURCE_FILES})

target_link_libraries(leaphi networksolver_lib kevintools_lib networkdesign_lib dataprocessing_lib)